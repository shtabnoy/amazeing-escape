import { mstNew } from './utils'
import NewGraph from './NewGraph'

describe('Test MST algorithm', () => {
  it('Graph 3 x 3', () => {
    const g = new NewGraph()
    g.addEdge('a', 'b', 5)
    g.addEdge('a', 'd', 2)
    g.addEdge('b', 'c', 5)
    g.addEdge('b', 'e', 1)
    g.addEdge('c', 'f', 7)
    g.addEdge('d', 'e', 3)
    g.addEdge('d', 'g', 6)
    g.addEdge('e', 'f', 7)
    g.addEdge('e', 'h', 3)
    g.addEdge('f', 'i', 3)
    g.addEdge('g', 'h', 6)
    g.addEdge('h', 'i', 7)

    const result = mstNew(g)
    expect(result.edges[0].src).toBe('a')
    expect(result.edges[0].dest).toBe('d')
    expect(result.edges[0].weight).toBe(2)
    expect(result.edges[1].src).toBe('d')
    expect(result.edges[1].dest).toBe('e')
    expect(result.edges[1].weight).toBe(3)
    expect(result.edges[2].src).toBe('e')
    expect(result.edges[2].dest).toBe('b')
    expect(result.edges[2].weight).toBe(1)
    expect(result.edges[3].src).toBe('e')
    expect(result.edges[3].dest).toBe('h')
    expect(result.edges[3].weight).toBe(3)
    expect(result.edges[4].src).toBe('b')
    expect(result.edges[4].dest).toBe('c')
    expect(result.edges[4].weight).toBe(5)
    expect(result.edges[5].src).toBe('d')
    expect(result.edges[5].dest).toBe('g')
    expect(result.edges[5].weight).toBe(6)
    expect(result.edges[6].src).toBe('e')
    expect(result.edges[6].dest).toBe('f')
    expect(result.edges[6].weight).toBe(7)
    expect(result.edges[7].src).toBe('f')
    expect(result.edges[7].dest).toBe('i')
    expect(result.edges[7].weight).toBe(3)

    expect(g.edges.length).toBe(12)
    expect(result.edges.length).toBe(8)
  })

  it('Graph 4 x 4', () => {
    const g = new NewGraph()
    g.addEdge('a', 'b', 7)
    g.addEdge('a', 'e', 3)
    g.addEdge('b', 'c', 5)
    g.addEdge('b', 'f', 5)
    g.addEdge('c', 'd', 1)
    g.addEdge('c', 'g', 3)
    g.addEdge('d', 'h', 4)
    g.addEdge('e', 'f', 6)
    g.addEdge('e', 'i', 4)
    g.addEdge('f', 'g', 1)
    g.addEdge('f', 'j', 7)
    g.addEdge('g', 'h', 2)
    g.addEdge('g', 'k', 2)
    g.addEdge('h', 'l', 3)
    g.addEdge('i', 'j', 6)
    g.addEdge('i', 'm', 8)
    g.addEdge('j', 'k', 3)
    g.addEdge('j', 'n', 2)
    g.addEdge('k', 'l', 8)
    g.addEdge('k', 'o', 1)
    g.addEdge('l', 'p', 5)
    g.addEdge('m', 'n', 2)
    g.addEdge('n', 'o', 5)
    g.addEdge('o', 'p', 9)

    const result = mstNew(g)
    expect(result.edges[0].src).toBe('a')
    expect(result.edges[0].dest).toBe('e')
    expect(result.edges[0].weight).toBe(3)
    expect(result.edges[1].src).toBe('e')
    expect(result.edges[1].dest).toBe('i')
    expect(result.edges[1].weight).toBe(4)
    expect(result.edges[2].src).toBe('e')
    expect(result.edges[2].dest).toBe('f')
    expect(result.edges[2].weight).toBe(6)
    expect(result.edges[3].src).toBe('f')
    expect(result.edges[3].dest).toBe('g')
    expect(result.edges[3].weight).toBe(1)
    expect(result.edges[4].src).toBe('g')
    expect(result.edges[4].dest).toBe('h')
    expect(result.edges[4].weight).toBe(2)
    expect(result.edges[5].src).toBe('g')
    expect(result.edges[5].dest).toBe('k')
    expect(result.edges[5].weight).toBe(2)
    expect(result.edges[6].src).toBe('k')
    expect(result.edges[6].dest).toBe('o')
    expect(result.edges[6].weight).toBe(1)
    expect(result.edges[7].src).toBe('g')
    expect(result.edges[7].dest).toBe('c')
    expect(result.edges[7].weight).toBe(3)
    expect(result.edges[8].src).toBe('c')
    expect(result.edges[8].dest).toBe('d')
    expect(result.edges[8].weight).toBe(1)
    expect(result.edges[9].src).toBe('h')
    expect(result.edges[9].dest).toBe('l')
    expect(result.edges[9].weight).toBe(3)
    expect(result.edges[10].src).toBe('k')
    expect(result.edges[10].dest).toBe('j')
    expect(result.edges[10].weight).toBe(3)
    expect(result.edges[11].src).toBe('j')
    expect(result.edges[11].dest).toBe('n')
    expect(result.edges[11].weight).toBe(2)
    expect(result.edges[12].src).toBe('n')
    expect(result.edges[12].dest).toBe('m')
    expect(result.edges[12].weight).toBe(2)
    expect(result.edges[13].src).toBe('f')
    expect(result.edges[13].dest).toBe('b')
    expect(result.edges[13].weight).toBe(5)
    expect(result.edges[14].src).toBe('l')
    expect(result.edges[14].dest).toBe('p')
    expect(result.edges[14].weight).toBe(5)

    expect(g.edges.length).toBe(24)
    expect(result.edges.length).toBe(15)
  })
})
