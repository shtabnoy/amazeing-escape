import { mstNew } from './utils'
import NewGraph from './NewGraph'

describe('Test MST algorithm', () => {
  it('Graph 3 x 3', () => {
    const g = new NewGraph()
    g.addEdge('0,0', '1,0', 5)
    g.addEdge('0,0', '0,1', 2)
    g.addEdge('1,0', '2,0', 5)
    g.addEdge('1,0', '1,1', 1)
    g.addEdge('2,0', '2,1', 7)
    g.addEdge('0,1', '1,1', 3)
    g.addEdge('0,1', '0,2', 6)
    g.addEdge('1,1', '2,1', 7)
    g.addEdge('1,1', '1,2', 3)
    g.addEdge('2,1', '2,2', 3)
    g.addEdge('0,2', '1,2', 6)
    g.addEdge('1,2', '2,2', 7)

    const result = mstNew(g)
    expect(result.edges[0].src).toBe('0,0')
    expect(result.edges[0].dest).toBe('0,1')
    expect(result.edges[0].weight).toBe(2)
    expect(result.edges[1].src).toBe('0,1')
    expect(result.edges[1].dest).toBe('1,1')
    expect(result.edges[1].weight).toBe(3)
    expect(result.edges[2].src).toBe('1,1')
    expect(result.edges[2].dest).toBe('1,0')
    expect(result.edges[2].weight).toBe(1)
    expect(result.edges[3].src).toBe('1,1')
    expect(result.edges[3].dest).toBe('1,2')
    expect(result.edges[3].weight).toBe(3)
    expect(result.edges[4].src).toBe('1,0')
    expect(result.edges[4].dest).toBe('2,0')
    expect(result.edges[4].weight).toBe(5)
    expect(result.edges[5].src).toBe('0,1')
    expect(result.edges[5].dest).toBe('0,2')
    expect(result.edges[5].weight).toBe(6)
    expect(result.edges[6].src).toBe('1,1')
    expect(result.edges[6].dest).toBe('2,1')
    expect(result.edges[6].weight).toBe(7)
    expect(result.edges[7].src).toBe('2,1')
    expect(result.edges[7].dest).toBe('2,2')
    expect(result.edges[7].weight).toBe(3)

    expect(g.edges.length).toBe(12)
    expect(result.edges.length).toBe(8)
  })

  it('Graph 4 x 4', () => {
    const g = new NewGraph()
    g.addEdge('0,0', '1,0', 7)
    g.addEdge('0,0', '0,1', 3)
    g.addEdge('1,0', '2,0', 5)
    g.addEdge('1,0', '1,1', 5)
    g.addEdge('2,0', '3,0', 1)
    g.addEdge('2,0', '2,1', 3)
    g.addEdge('3,0', '3,1', 4)
    g.addEdge('0,1', '1,1', 6)
    g.addEdge('0,1', '0,2', 4)
    g.addEdge('1,1', '2,1', 1)
    g.addEdge('1,1', '1,2', 7)
    g.addEdge('2,1', '3,1', 2)
    g.addEdge('2,1', '2,2', 2)
    g.addEdge('3,1', '3,2', 3)
    g.addEdge('0,2', '1,2', 6)
    g.addEdge('0,2', '0,3', 8)
    g.addEdge('1,2', '2,2', 3)
    g.addEdge('1,2', '1,3', 2)
    g.addEdge('2,2', '3,2', 8)
    g.addEdge('2,2', '2,3', 1)
    g.addEdge('3,2', '3,3', 5)
    g.addEdge('0,3', '1,3', 2)
    g.addEdge('1,3', '2,3', 5)
    g.addEdge('2,3', '3,3', 9)

    const result = mstNew(g)
    expect(result.edges[0].src).toBe('0,0')
    expect(result.edges[0].dest).toBe('0,1')
    expect(result.edges[0].weight).toBe(3)
    expect(result.edges[1].src).toBe('0,1')
    expect(result.edges[1].dest).toBe('0,2')
    expect(result.edges[1].weight).toBe(4)
    expect(result.edges[2].src).toBe('0,1')
    expect(result.edges[2].dest).toBe('1,1')
    expect(result.edges[2].weight).toBe(6)
    expect(result.edges[3].src).toBe('1,1')
    expect(result.edges[3].dest).toBe('2,1')
    expect(result.edges[3].weight).toBe(1)
    expect(result.edges[4].src).toBe('2,1')
    expect(result.edges[4].dest).toBe('3,1')
    expect(result.edges[4].weight).toBe(2)
    expect(result.edges[5].src).toBe('2,1')
    expect(result.edges[5].dest).toBe('2,2')
    expect(result.edges[5].weight).toBe(2)
    expect(result.edges[6].src).toBe('2,2')
    expect(result.edges[6].dest).toBe('2,3')
    expect(result.edges[6].weight).toBe(1)
    expect(result.edges[7].src).toBe('2,1')
    expect(result.edges[7].dest).toBe('2,0')
    expect(result.edges[7].weight).toBe(3)
    expect(result.edges[8].src).toBe('2,0')
    expect(result.edges[8].dest).toBe('3,0')
    expect(result.edges[8].weight).toBe(1)
    expect(result.edges[9].src).toBe('3,1')
    expect(result.edges[9].dest).toBe('3,2')
    expect(result.edges[9].weight).toBe(3)
    expect(result.edges[10].src).toBe('2,2')
    expect(result.edges[10].dest).toBe('1,2')
    expect(result.edges[10].weight).toBe(3)
    expect(result.edges[11].src).toBe('1,2')
    expect(result.edges[11].dest).toBe('1,3')
    expect(result.edges[11].weight).toBe(2)
    expect(result.edges[12].src).toBe('1,3')
    expect(result.edges[12].dest).toBe('0,3')
    expect(result.edges[12].weight).toBe(2)
    expect(result.edges[13].src).toBe('1,1')
    expect(result.edges[13].dest).toBe('1,0')
    expect(result.edges[13].weight).toBe(5)
    expect(result.edges[14].src).toBe('3,2')
    expect(result.edges[14].dest).toBe('3,3')
    expect(result.edges[14].weight).toBe(5)

    expect(g.edges.length).toBe(24)
    expect(result.edges.length).toBe(15)
  })
})
