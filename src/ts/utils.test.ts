import { mstNew } from './utils'
import NewGraph from './NewGraph'

test('Test MST algorithm', () => {
  const g = new NewGraph()
  g.addEdge('a', 'b', 5)
  g.addEdge('a', 'd', 2)
  g.addEdge('b', 'c', 5)
  g.addEdge('b', 'e', 1)
  g.addEdge('c', 'f', 7)
  g.addEdge('d', 'e', 3)
  g.addEdge('d', 'g', 6)
  g.addEdge('e', 'f', 7)
  g.addEdge('e', 'h', 3)
  g.addEdge('f', 'i', 3)
  g.addEdge('g', 'h', 6)
  g.addEdge('h', 'i', 7)

  const result = mstNew(g)
  expect(result.edges[0].src).toBe('a')
  expect(result.edges[0].dest).toBe('d')
  expect(result.edges[0].weight).toBe(2)
  expect(result.edges[1].src).toBe('d')
  expect(result.edges[1].dest).toBe('e')
  expect(result.edges[1].weight).toBe(3)
  expect(result.edges[2].src).toBe('e')
  expect(result.edges[2].dest).toBe('b')
  expect(result.edges[2].weight).toBe(1)
  expect(result.edges[3].src).toBe('e')
  expect(result.edges[3].dest).toBe('h')
  expect(result.edges[3].weight).toBe(3)
  expect(result.edges[4].src).toBe('b')
  expect(result.edges[4].dest).toBe('c')
  expect(result.edges[4].weight).toBe(5)
  expect(result.edges[5].src).toBe('d')
  expect(result.edges[5].dest).toBe('g')
  expect(result.edges[5].weight).toBe(6)
  expect(result.edges[6].src).toBe('e')
  expect(result.edges[6].dest).toBe('f')
  expect(result.edges[6].weight).toBe(7)
  expect(result.edges[7].src).toBe('f')
  expect(result.edges[7].dest).toBe('i')
  expect(result.edges[7].weight).toBe(3)
})
